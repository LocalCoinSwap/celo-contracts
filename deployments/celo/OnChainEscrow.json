{
  "address": "0xE4789582d80935353d0aF9f46e07e61649c97339",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tradeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "relayerGasSpent",
          "type": "uint128"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tradeHash",
          "type": "bytes32"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tradeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "relayerGasSpent",
          "type": "uint128"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tradeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "relayerGasSpent",
          "type": "uint128"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16[]",
          "name": "_tradeID",
          "type": "bytes16[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_seller",
          "type": "address[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_buyer",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_value",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_fee",
          "type": "uint16[]"
        },
        {
          "internalType": "uint128[]",
          "name": "_maximumGasPrice",
          "type": "uint128[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_s",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_instructionByte",
          "type": "uint8[]"
        }
      ],
      "name": "batchRelay",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_tradeID",
          "type": "bytes16"
        },
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        }
      ],
      "name": "buyerCancel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tradeHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "createEscrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "relayerGasSpent",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_tradeID",
          "type": "bytes16"
        },
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_maximumGasPrice",
          "type": "uint128"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_instructionByte",
          "type": "uint8"
        }
      ],
      "name": "relay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tradeHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_v_gasless",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r_gasless",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s_gasless",
          "type": "bytes32"
        }
      ],
      "name": "relayEscrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_tradeID",
          "type": "bytes16"
        },
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        }
      ],
      "name": "release",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_tradeID",
          "type": "bytes16"
        },
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_buyerPercent",
          "type": "uint8"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newArbitrator",
          "type": "address"
        }
      ],
      "name": "setArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRelayer",
          "type": "address"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7c9b753746bbccf21ef2e750883c1ee2110e0ea1a9d16256f6c6395c8049768",
  "receipt": {
    "to": null,
    "from": "0x7aB5f14c7d62001B50C941168CeEA36912f5813d",
    "contractAddress": "0xE4789582d80935353d0aF9f46e07e61649c97339",
    "transactionIndex": 2,
    "gasUsed": "3905266",
    "logsBloom": "0x
    "blockHash": "0x463a1832822fcfae0416b0679dae03721bcca98b369f62d037e2d648383ef125",
    "transactionHash": "0xf7c9b753746bbccf21ef2e750883c1ee2110e0ea1a9d16256f6c6395c8049768",
    "logs": [],
    "blockNumber": 9947361,
    "cumulativeGasUsed": "4278824",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7aB5f14c7d62001B50C941168CeEA36912f5813d"
  ],
  "solcInputHash": "2c209ac43488df664b35743dab9e508b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"_tradeID\",\"type\":\"bytes16[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_seller\",\"type\":\"address[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_fee\",\"type\":\"uint16[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_maximumGasPrice\",\"type\":\"uint128[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_instructionByte\",\"type\":\"uint8[]\"}],\"name\":\"batchRelay\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"buyerCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tradeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_maximumGasPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_instructionByte\",\"type\":\"uint8\"}],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tradeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v_gasless\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r_gasless\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s_gasless\",\"type\":\"bytes32\"}],\"name\":\"relayEscrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_buyerPercent\",\"type\":\"uint8\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newArbitrator\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRelayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnChainEscrow.sol\":\"OnChainEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OnChainEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libs/SafeERC20.sol\\\";\\nimport \\\"./libs/IERC20.sol\\\";\\n\\ncontract OnChainEscrow {\\n  using SafeERC20 for IERC20;\\n\\n  /***********************\\n    +       Globals        +\\n    ***********************/\\n\\n  address public arbitrator;\\n  address public owner;\\n  address public relayer;\\n\\n  struct Escrow {\\n    bool exists;\\n    uint128 relayerGasSpent;\\n    address tokenContract;\\n  }\\n\\n  mapping(bytes32 => Escrow) public escrows;\\n  mapping(address => uint256) public collectedFees;\\n\\n  /***********************\\n    +     Instructions     +\\n    ***********************/\\n\\n  uint8 constant private RELEASE_ESCROW = 0x01;\\n  uint8 constant private BUYER_CANCELS = 0x02;\\n  uint8 constant private RESOLVE_DISPUTE = 0x03;\\n\\n  /***********************\\n    +       Events        +\\n    ***********************/\\n\\n  event Created(bytes32 tradeHash);\\n  event Cancelled(bytes32 tradeHash, uint128 relayerGasSpent);\\n  event Released(bytes32 tradeHash, uint128 relayerGasSpent);\\n  event DisputeResolved(bytes32 tradeHash, uint128 relayerGasSpent);\\n\\n  /***********************\\n    +     Constructor      +\\n    ***********************/\\n\\n  constructor(address initialAddress) {\\n    owner = initialAddress;\\n    arbitrator = initialAddress;\\n    relayer = initialAddress;\\n  }\\n\\n  /***********************\\n    +     Open Escrow     +\\n    ***********************/\\n\\n  function createEscrow(\\n    bytes32 _tradeHash,\\n    address _currency,\\n    uint256 _value,\\n    uint8 _v, // Signature value\\n    bytes32 _r, // Signature value\\n    bytes32 _s // Signature value\\n  ) external payable {\\n    require(!escrows[_tradeHash].exists, \\\"Trade already exists\\\");\\n    require(_value > 1, \\\"Escrow value too small\\\");\\n    bytes32 _invitationHash = keccak256(abi.encodePacked(_tradeHash));\\n    require(\\n      recoverAddress(_invitationHash, _v, _r, _s) == relayer,\\n      \\\"Signature not from relayer\\\"\\n    );\\n\\n    IERC20(_currency).safeTransferFrom(msg.sender, address(this), _value);\\n\\n    escrows[_tradeHash] = Escrow(true, 0, _currency);\\n    emit Created(_tradeHash);\\n  }\\n\\n  function relayEscrow(\\n    bytes32 _tradeHash,\\n    address _currency,\\n    uint256 _value,\\n    uint8 _v, // Signature value for trade invitation by LocalCoinSwap\\n    bytes32 _r, // Signature value for trade invitation by LocalCoinSwap\\n    bytes32 _s, // Signature value for trade invitation by LocalCoinSwp\\n    bytes32 _nonce, // Random nonce used for Gasless send\\n    uint8 _v_gasless, // Signature value for GasLess send\\n    bytes32 _r_gasless, // Signature value for GasLess send\\n    bytes32 _s_gasless // Signature value for GasLess send\\n  ) external payable {\\n    require(\\n      !escrows[_tradeHash].exists,\\n      \\\"Trade already exists\\\"\\n    );\\n    bytes32 _invitationHash = keccak256(abi.encodePacked(_tradeHash));\\n    require(_value > 1, \\\"Escrow value too small\\\"); // Check escrow value is greater than minimum value\\n    require(\\n      recoverAddress(_invitationHash, _v, _r, _s) == relayer,\\n      \\\"Signature not from relayer\\\"\\n    );\\n\\n    // Perform gasless send from seller to contract\\n    IERC20(_currency).transferWithAuthorization(\\n      msg.sender,\\n      address(this),\\n      _value,\\n      0,\\n      2**256 - 1, // MAX INT\\n      _nonce,\\n      _v_gasless,\\n      _r_gasless,\\n      _s_gasless\\n    );\\n\\n    escrows[_tradeHash] = Escrow(true, 0, _currency);\\n    emit Created(_tradeHash);\\n  }\\n\\n  /***********************\\n    +   Complete Escrow    +\\n    ***********************/\\n\\n  function release(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) external returns (bool) {\\n    require(msg.sender == _seller, \\\"Must be seller\\\");\\n    return doRelease(_tradeID, _seller, _buyer, _value, _fee);\\n  }\\n\\n  uint16 constant GAS_doRelease = 3658;\\n\\n  function doRelease(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private returns (bool) {\\n    Escrow memory _escrow;\\n    bytes32 _tradeHash;\\n    (_escrow, _tradeHash) = getEscrowAndHash(\\n      _tradeID,\\n      _seller,\\n      _buyer,\\n      _value,\\n      _fee\\n    );\\n    if (!_escrow.exists) return false;\\n    uint128 _gasFees = _escrow.relayerGasSpent +\\n      (msg.sender == relayer ? GAS_doRelease * uint128(tx.gasprice) : 0);\\n    delete escrows[_tradeHash];\\n    emit Released(_tradeHash, _gasFees);\\n    transferMinusFees(_escrow.tokenContract, _buyer, _value, _fee);\\n    return true;\\n  }\\n\\n  uint16 constant GAS_doResolveDispute = 14060;\\n\\n  function resolveDispute(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s,\\n    uint8 _buyerPercent\\n  ) external onlyArbitrator {\\n    address _signature = recoverAddress(\\n      keccak256(abi.encodePacked(_tradeID, RESOLVE_DISPUTE)),\\n      _v,\\n      _r,\\n      _s\\n    );\\n    require(\\n      _signature == _buyer || _signature == _seller,\\n      \\\"Must be buyer or seller\\\"\\n    );\\n\\n    Escrow memory _escrow;\\n    bytes32 _tradeHash;\\n    (_escrow, _tradeHash) = getEscrowAndHash(\\n      _tradeID,\\n      _seller,\\n      _buyer,\\n      _value,\\n      _fee\\n    );\\n    require(_escrow.exists, \\\"Escrow does not exist\\\");\\n    require(_buyerPercent <= 100, \\\"_buyerPercent must be 100 or lower\\\");\\n\\n    _escrow.relayerGasSpent += (GAS_doResolveDispute * uint128(tx.gasprice));\\n\\n    delete escrows[_tradeHash];\\n    emit DisputeResolved(_tradeHash, _escrow.relayerGasSpent);\\n    if (_buyerPercent > 0) {\\n      // If dispute goes to buyer take the fee\\n      uint256 _totalFees = ((_value * _fee) / 10000);\\n      // Prevent underflow\\n      uint256 buyerAmount = (_value * _buyerPercent) / 100 - _totalFees;\\n      require(buyerAmount <= _value, \\\"Overflow error\\\");\\n      collectedFees[_escrow.tokenContract] += _totalFees;\\n\\n      if (_escrow.tokenContract == 0x0000000000000000000000000000000000000000) {\\n        _buyer.transfer(buyerAmount);\\n      } else {\\n        IERC20(_escrow.tokenContract).safeTransfer(_buyer, buyerAmount);\\n      }\\n    }\\n    if (_buyerPercent < 100) {\\n      uint256 sellerAmount = (_value * (100 - _buyerPercent)) / 100;\\n      if (_escrow.tokenContract == 0x0000000000000000000000000000000000000000) {\\n        _seller.transfer(sellerAmount);\\n      } else {\\n        IERC20(_escrow.tokenContract).safeTransfer(_seller, sellerAmount);\\n      }\\n    }\\n  }\\n\\n  function buyerCancel(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) external returns (bool) {\\n    require(msg.sender == _buyer, \\\"Must be buyer\\\");\\n    return doBuyerCancel(_tradeID, _seller, _buyer, _value, _fee);\\n  }\\n\\n  function increaseGasSpent(bytes32 _tradeHash, uint128 _gas) private {\\n    escrows[_tradeHash].relayerGasSpent += _gas * uint128(tx.gasprice);\\n  }\\n\\n  uint16 constant GAS_doBuyerCancel = 2367;\\n\\n  function doBuyerCancel(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private returns (bool) {\\n    Escrow memory _escrow;\\n    bytes32 _tradeHash;\\n    (_escrow, _tradeHash) = getEscrowAndHash(\\n      _tradeID,\\n      _seller,\\n      _buyer,\\n      _value,\\n      _fee\\n    );\\n    require(_escrow.exists, \\\"Escrow does not exist\\\");\\n    if (!_escrow.exists) {\\n      return false;\\n    }\\n    uint128 _gasFees = _escrow.relayerGasSpent +\\n      (msg.sender == relayer ? GAS_doBuyerCancel * uint128(tx.gasprice) : 0);\\n    delete escrows[_tradeHash];\\n    emit Cancelled(_tradeHash, _gasFees);\\n    transferMinusFees(_escrow.tokenContract, _seller, _value, 0);\\n    return true;\\n  }\\n\\n  /***********************\\n    +        Relays        +\\n    ***********************/\\n\\n  uint16 constant GAS_batchRelayBaseCost = 30000;\\n\\n  function batchRelay(\\n    bytes16[] memory _tradeID,\\n    address payable[] memory _seller,\\n    address payable[] memory _buyer,\\n    uint256[] memory _value,\\n    uint16[] memory _fee,\\n    uint128[] memory _maximumGasPrice,\\n    uint8[] memory _v,\\n    bytes32[] memory _r,\\n    bytes32[] memory _s,\\n    uint8[] memory _instructionByte\\n  ) public returns (bool[] memory) {\\n    bool[] memory _results = new bool[](_tradeID.length);\\n    for (uint8 i = 0; i < _tradeID.length; i++) {\\n      _results[i] = relay(\\n        _tradeID[i],\\n        _seller[i],\\n        _buyer[i],\\n        _value[i],\\n        _fee[i],\\n        _maximumGasPrice[i],\\n        _v[i],\\n        _r[i],\\n        _s[i],\\n        _instructionByte[i]\\n      );\\n    }\\n    return _results;\\n  }\\n\\n  function relay(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee,\\n    uint128 _maximumGasPrice,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s,\\n    uint8 _instructionByte\\n  ) public returns (bool result) {\\n    address _relayedSender = getRelayedSender(\\n      _tradeID,\\n      _instructionByte,\\n      _maximumGasPrice,\\n      _v,\\n      _r,\\n      _s\\n    );\\n    if (_relayedSender == _buyer) {\\n      if (_instructionByte == BUYER_CANCELS) {\\n        return doBuyerCancel(_tradeID, _seller, _buyer, _value, _fee);\\n      }\\n    } else if (_relayedSender == _seller) {\\n      if (_instructionByte == RELEASE_ESCROW) {\\n        return doRelease(_tradeID, _seller, _buyer, _value, _fee);\\n      }\\n    } else {\\n      require(msg.sender == _seller, \\\"Unrecognised party\\\");\\n      return false;\\n    }\\n  }\\n\\n  /***********************\\n    +      Management      +\\n    ***********************/\\n\\n  function setArbitrator(address _newArbitrator) external onlyOwner {\\n    arbitrator = _newArbitrator;\\n  }\\n\\n  function setOwner(address _newOwner) external onlyOwner {\\n    owner = _newOwner;\\n  }\\n\\n  function setRelayer(address _newRelayer) external onlyOwner {\\n    relayer = _newRelayer;\\n  }\\n\\n  /***********************\\n    +   Helper Functions   +\\n    ***********************/\\n\\n  function transferMinusFees(\\n    address _currency,\\n    address payable _to,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private {\\n    uint256 _totalFees = ((_value * _fee) / 10000);\\n\\n    // Add fees to the pot for localcoinswap to withdraw\\n    collectedFees[_currency] += _totalFees;\\n    IERC20(_currency).safeTransfer(_to, _value - _totalFees);\\n  }\\n\\n  function withdrawFees(\\n    address payable _to,\\n    address _currency,\\n    uint256 _amount\\n  ) external onlyOwner {\\n    // This check also prevents underflow\\n    require(\\n      _amount <= collectedFees[_currency],\\n      \\\"Amount is higher than amount available\\\"\\n    );\\n    collectedFees[_currency] -= _amount;\\n    IERC20(_currency).safeTransfer(_to, _amount);\\n  }\\n\\n  function getEscrowAndHash(\\n    bytes16 _tradeID,\\n    address _seller,\\n    address _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private view returns (Escrow storage, bytes32) {\\n    bytes32 _tradeHash = keccak256(\\n      abi.encodePacked(_tradeID, _seller, _buyer, _value, _fee)\\n    );\\n    return (escrows[_tradeHash], _tradeHash);\\n  }\\n\\n  function recoverAddress(\\n    bytes32 _h,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) private pure returns (address) {\\n    bytes memory _prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n    bytes32 _prefixedHash = keccak256(abi.encodePacked(_prefix, _h));\\n    return ecrecover(_prefixedHash, _v, _r, _s);\\n  }\\n\\n  function getRelayedSender(\\n    bytes16 _tradeID,\\n    uint8 _instructionByte,\\n    uint128 _maximumGasPrice,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) private view returns (address) {\\n    bytes32 _hash = keccak256(\\n      abi.encodePacked(_tradeID, _instructionByte, _maximumGasPrice)\\n    );\\n    require(\\n      tx.gasprice < _maximumGasPrice,\\n      \\\"Gas price is higher than maximum gas price\\\"\\n    );\\n    return recoverAddress(_hash, _v, _r, _s);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only the owner can do this\\\");\\n    _;\\n  }\\n\\n  modifier onlyArbitrator() {\\n    require(msg.sender == arbitrator, \\\"Only the arbitrator can do this\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x75b1be3f69b7a8442860aecea1c18553adeb39d545d80d24e255bf6b4054ba79\",\"license\":\"MIT\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(\\n      data\\n    );\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4be7d9f8b1fc43dce84087ddd04e2f0da554dade1569129e589b9d4418571419\",\"license\":\"UNLICENSED\"},\"contracts/libs/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  // USDC gasless send\\n  function transferWithAuthorization(\\n    address from,\\n    address to,\\n    uint256 value,\\n    uint256 validAfter,\\n    uint256 validBefore,\\n    bytes32 nonce,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0x9302c862d6177a41ecea0c5574ed2354f52424a008d75e0238a21040312f9573\",\"license\":\"MIT\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // solhint-disable-next-line max-line-length\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) - value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(\\n      data,\\n      \\\"SafeERC20: low-level call failed\\\"\\n    );\\n    if (returndata.length > 0) {\\n      // solhint-disable-next-line max-line-length\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2e42b10e01e0d0c35a4788991dcd5ad709c1f68ef577397eff7b2482d3ce131a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80636cc6cde11161008a578063b0eefabe11610059578063b0eefabe14610343578063beba34141461036c578063e55dc4e614610388578063e9600f12146103b1576100f3565b80636cc6cde1146102855780638406c079146102b05780638da5cb5b146102db5780638eb4e0ad14610306576100f3565b80632d83549c116100c65780632d83549c146101c45780632daaeb73146102035780633b325dba146102405780636548e9bc1461025c576100f3565b806313af4035146100f85780631cead9a71461012157806324943c7d1461015e5780632cc9636c14610187575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190612af7565b6103ee565b005b34801561012d57600080fd5b5061014860048036038101906101439190612af7565b6104c2565b6040516101559190613a46565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190612eb5565b6104da565b005b34801561019357600080fd5b506101ae60048036038101906101a99190612d63565b610b61565b6040516101bb9190613769565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190612f7b565b610be9565b6040516101fa93929190613784565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190612dda565b610c5c565b6040516102379190613769565b60405180910390f35b61025a60048036038101906102559190612fa4565b610db2565b005b34801561026857600080fd5b50610283600480360381019061027e9190612af7565b61108f565b005b34801561029157600080fd5b5061029a611163565b6040516102a7919061363f565b60405180910390f35b3480156102bc57600080fd5b506102c5611187565b6040516102d2919061363f565b60405180910390f35b3480156102e757600080fd5b506102f06111ad565b6040516102fd919061363f565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190612b6f565b6111d3565b60405161033a9190613747565b60405180910390f35b34801561034f57600080fd5b5061036a60048036038101906103659190612af7565b61157c565b005b6103866004803603810190610381919061302d565b61164f565b005b34801561039457600080fd5b506103af60048036038101906103aa9190612b20565b61199f565b005b3480156103bd57600080fd5b506103d860048036038101906103d39190612d63565b611b37565b6040516103e59190613769565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590613906565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055f90613946565b60405180910390fd5b600061059f8a600360405160200161058192919061357c565b60405160208183030381529060405280519060200120868686611bbf565b90508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061060657508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90613986565b60405180910390fd5b61064d6125d5565b600061065c8c8c8c8c8c611c82565b816040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050915080925081935050508160000151610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890613966565b60405180910390fd5b60648460ff1611156107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af906138e6565b60405180910390fd5b3a6136ec61ffff166107ca9190613cf2565b826020018181516107db9190613c25565b9150906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505060036000828152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f437ec3256bbed400455e142c7ce305c6e705cad2d1ba5a4ebed6a6dd133d93fb8183602001516040516108b19291906137d6565b60405180910390a160008460ff161115610a655760006127108961ffff168b6108da9190613d3c565b6108e49190613cc1565b905060008160648760ff168d6108fa9190613d3c565b6109049190613cc1565b61090e9190613d96565b90508a811115610953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094a906139e6565b60405180910390fd5b8160046000866040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109a69190613c6b565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16846040015173ffffffffffffffffffffffffffffffffffffffff161415610a32578b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a2c573d6000803e3d6000fd5b50610a62565b610a618c82866040015173ffffffffffffffffffffffffffffffffffffffff16611cdb9092919063ffffffff16565b5b50505b60648460ff161015610b535760006064856064610a829190613dca565b60ff168b610a909190613d3c565b610a9a9190613cc1565b9050600073ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff161415610b21578b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b1b573d6000803e3d6000fd5b50610b51565b610b508c82856040015173ffffffffffffffffffffffffffffffffffffffff16611cdb9092919063ffffffff16565b5b505b505050505050505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890613a26565b60405180910390fd5b610bde8686868686611d61565b905095945050505050565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b600080610c6d8c8489898989611ff4565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ccc57600260ff168360ff161415610cc757610cbf8c8c8c8c8c611d61565b915050610da4565b610da2565b8a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d2957600160ff168360ff161415610d2457610d1c8c8c8c8c8c612091565b915050610da4565b610da1565b8a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8e90613886565b60405180910390fd5b6000915050610da4565b5b505b9a9950505050505050505050565b6003600087815260200190815260200160002060000160009054906101000a900460ff1615610e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0d90613a06565b60405180910390fd5b60018411610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090613866565b60405180910390fd5b600086604051602001610e6c91906135e5565b604051602081830303815290604052805190602001209050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ec982868686611bbf565b73ffffffffffffffffffffffffffffffffffffffff1614610f1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1690613926565b60405180910390fd5b610f4c3330878973ffffffffffffffffffffffffffffffffffffffff166122df909392919063ffffffff16565b604051806060016040528060011515815260200160006fffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152506003600089815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f102d25c49d33fcdb8976a3f2744e0785c98d9e43b88364859e6aec4ae82eff5c8760405161107e91906137bb565b60405180910390a150505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690613906565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008b5167ffffffffffffffff811115611218577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156112465781602001602082028036833780820191505090505b50905060005b8c518160ff161015611569576115088d8260ff1681518110611297577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8360ff16815181106112db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8460ff168151811061131f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8560ff1681518110611363577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8660ff16815181106113a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8760ff16815181106113eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8860ff168151811061142f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8960ff1681518110611473577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8a60ff16815181106114b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518d8b60ff16815181106114fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610c5c565b828260ff1681518110611544577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019015159081151581525050808061156190613f4d565b91505061124c565b50809150509a9950505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461160c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160390613906565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360008b815260200190815260200160002060000160009054906101000a900460ff16156116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa90613a06565b60405180910390fd5b60008a6040516020016116c691906135e5565b60405160208183030381529060405280519060200120905060018911611721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171890613866565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611766828a8a8a611bbf565b73ffffffffffffffffffffffffffffffffffffffff16146117bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b390613926565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff1663e3ee160e33308c60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8b8b8b8b6040518a63ffffffff1660e01b815260040161182699989796959493929190613691565b600060405180830381600087803b15801561184057600080fd5b505af1158015611854573d6000803e3d6000fd5b50505050604051806060016040528060011515815260200160006fffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff16815250600360008d815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f102d25c49d33fcdb8976a3f2744e0785c98d9e43b88364859e6aec4ae82eff5c8b60405161198a91906137bb565b60405180910390a15050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2690613906565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa8906139a6565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b009190613d96565b92505081905550611b3283828473ffffffffffffffffffffffffffffffffffffffff16611cdb9092919063ffffffff16565b505050565b60008473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9e906138a6565b60405180910390fd5b611bb48686868686612091565b905095945050505050565b6000806040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008187604051602001611c0f929190613617565b60405160208183030381529060405280519060200120905060018187878760405160008152602001604052604051611c4a94939291906137ff565b6020604051602081039080840390855afa158015611c6c573d6000803e3d6000fd5b5050506020604051035192505050949350505050565b60008060008787878787604051602001611ca095949392919061351d565b604051602081830303815290604052805190602001209050600360008281526020019081526020016000208192509250509550959350505050565b611d5c8363a9059cbb60e01b8484604051602401611cfa92919061371e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612368565b505050565b6000611d6b6125d5565b6000611d7a8888888888611c82565b816040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050915080925081935050508160000151611e8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8690613966565b60405180910390fd5b8160000151611ea357600092505050611feb565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f01576000611f14565b3a61093f61ffff16611f139190613cf2565b5b8360200151611f239190613c25565b905060036000838152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507fbaf30435be856293935d56e0fdfba338d6c0a1f92aad037a978ce68f3dff691e8282604051611fca9291906137d6565b60405180910390a1611fe383604001518988600061242f565b600193505050505b95945050505050565b60008087878760405160200161200c939291906135a8565b604051602081830303815290604052805190602001209050856fffffffffffffffffffffffffffffffff163a10612078576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206f906138c6565b60405180910390fd5b61208481868686611bbf565b9150509695505050505050565b600061209b6125d5565b60006120aa8888888888611c82565b816040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505091508092508193505050816000015161218f576000925050506122d6565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121ed576000612200565b3a610e4a61ffff166121ff9190613cf2565b5b836020015161220f9190613c25565b905060036000838152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f44306e460694e3f7e04300c4479a6818c0a825e0482fd6d4d0f16b0232e9620582826040516122b69291906137d6565b60405180910390a16122ce836040015188888861242f565b600193505050505b95945050505050565b612362846323b872dd60e01b8585856040516024016123009392919061365a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612368565b50505050565b60006123ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124e39092919063ffffffff16565b905060008151111561242a57808060200190518101906123ea9190612d3a565b612429576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612420906139c6565b60405180910390fd5b5b505050565b60006127108261ffff16846124449190613d3c565b61244e9190613cc1565b905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461249f9190613c6b565b925050819055506124dc8482856124b69190613d96565b8773ffffffffffffffffffffffffffffffffffffffff16611cdb9092919063ffffffff16565b5050505050565b60606124f284846000856124fb565b90509392505050565b60606000808673ffffffffffffffffffffffffffffffffffffffff1685876040516125269190613600565b60006040518083038185875af1925050503d8060008114612563576040519150601f19603f3d011682016040523d82523d6000602084013e612568565b606091505b5091509150811561257d5780925050506125cd565b6000815111156125905780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c49190613844565b60405180910390fd5b949350505050565b604051806060016040528060001515815260200160006fffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600061263361262e84613a86565b613a61565b9050808382526020820190508285602086028201111561265257600080fd5b60005b8581101561268257816126688882612929565b845260208401935060208301925050600181019050612655565b5050509392505050565b600061269f61269a84613ab2565b613a61565b905080838252602082019050828560208602820111156126be57600080fd5b60005b858110156126ee57816126d48882612a79565b8452602084019350602083019250506001810190506126c1565b5050509392505050565b600061270b61270684613ade565b613a61565b9050808382526020820190508285602086028201111561272a57600080fd5b60005b8581101561275a57816127408882612a8e565b84526020840193506020830192505060018101905061272d565b5050509392505050565b600061277761277284613b0a565b613a61565b9050808382526020820190508285602086028201111561279657600080fd5b60005b858110156127c657816127ac8882612aa3565b845260208401935060208301925050600181019050612799565b5050509392505050565b60006127e36127de84613b36565b613a61565b9050808382526020820190508285602086028201111561280257600080fd5b60005b8581101561283257816128188882612ab8565b845260208401935060208301925050600181019050612805565b5050509392505050565b600061284f61284a84613b62565b613a61565b9050808382526020820190508285602086028201111561286e57600080fd5b60005b8581101561289e57816128848882612acd565b845260208401935060208301925050600181019050612871565b5050509392505050565b60006128bb6128b684613b8e565b613a61565b905080838252602082019050828560208602820111156128da57600080fd5b60005b8581101561290a57816128f08882612ae2565b8452602084019350602083019250506001810190506128dd565b5050509392505050565b600081359050612923816143c0565b92915050565b600081359050612938816143d7565b92915050565b600082601f83011261294f57600080fd5b813561295f848260208601612620565b91505092915050565b600082601f83011261297957600080fd5b813561298984826020860161268c565b91505092915050565b600082601f8301126129a357600080fd5b81356129b38482602086016126f8565b91505092915050565b600082601f8301126129cd57600080fd5b81356129dd848260208601612764565b91505092915050565b600082601f8301126129f757600080fd5b8135612a078482602086016127d0565b91505092915050565b600082601f830112612a2157600080fd5b8135612a3184826020860161283c565b91505092915050565b600082601f830112612a4b57600080fd5b8135612a5b8482602086016128a8565b91505092915050565b600081519050612a73816143ee565b92915050565b600081359050612a8881614405565b92915050565b600081359050612a9d8161441c565b92915050565b600081359050612ab281614433565b92915050565b600081359050612ac78161444a565b92915050565b600081359050612adc81614461565b92915050565b600081359050612af181614478565b92915050565b600060208284031215612b0957600080fd5b6000612b1784828501612914565b91505092915050565b600080600060608486031215612b3557600080fd5b6000612b4386828701612929565b9350506020612b5486828701612914565b9250506040612b6586828701612acd565b9150509250925092565b6000806000806000806000806000806101408b8d031215612b8f57600080fd5b60008b013567ffffffffffffffff811115612ba957600080fd5b612bb58d828e01612968565b9a505060208b013567ffffffffffffffff811115612bd257600080fd5b612bde8d828e0161293e565b99505060408b013567ffffffffffffffff811115612bfb57600080fd5b612c078d828e0161293e565b98505060608b013567ffffffffffffffff811115612c2457600080fd5b612c308d828e01612a10565b97505060808b013567ffffffffffffffff811115612c4d57600080fd5b612c598d828e016129e6565b96505060a08b013567ffffffffffffffff811115612c7657600080fd5b612c828d828e016129bc565b95505060c08b013567ffffffffffffffff811115612c9f57600080fd5b612cab8d828e01612a3a565b94505060e08b013567ffffffffffffffff811115612cc857600080fd5b612cd48d828e01612992565b9350506101008b013567ffffffffffffffff811115612cf257600080fd5b612cfe8d828e01612992565b9250506101208b013567ffffffffffffffff811115612d1c57600080fd5b612d288d828e01612a3a565b9150509295989b9194979a5092959850565b600060208284031215612d4c57600080fd5b6000612d5a84828501612a64565b91505092915050565b600080600080600060a08688031215612d7b57600080fd5b6000612d8988828901612a79565b9550506020612d9a88828901612929565b9450506040612dab88828901612929565b9350506060612dbc88828901612acd565b9250506080612dcd88828901612ab8565b9150509295509295909350565b6000806000806000806000806000806101408b8d031215612dfa57600080fd5b6000612e088d828e01612a79565b9a50506020612e198d828e01612929565b9950506040612e2a8d828e01612929565b9850506060612e3b8d828e01612acd565b9750506080612e4c8d828e01612ab8565b96505060a0612e5d8d828e01612aa3565b95505060c0612e6e8d828e01612ae2565b94505060e0612e7f8d828e01612a8e565b935050610100612e918d828e01612a8e565b925050610120612ea38d828e01612ae2565b9150509295989b9194979a5092959850565b60008060008060008060008060006101208a8c031215612ed457600080fd5b6000612ee28c828d01612a79565b9950506020612ef38c828d01612929565b9850506040612f048c828d01612929565b9750506060612f158c828d01612acd565b9650506080612f268c828d01612ab8565b95505060a0612f378c828d01612ae2565b94505060c0612f488c828d01612a8e565b93505060e0612f598c828d01612a8e565b925050610100612f6b8c828d01612ae2565b9150509295985092959850929598565b600060208284031215612f8d57600080fd5b6000612f9b84828501612a8e565b91505092915050565b60008060008060008060c08789031215612fbd57600080fd5b6000612fcb89828a01612a8e565b9650506020612fdc89828a01612914565b9550506040612fed89828a01612acd565b9450506060612ffe89828a01612ae2565b935050608061300f89828a01612a8e565b92505060a061302089828a01612a8e565b9150509295509295509295565b6000806000806000806000806000806101408b8d03121561304d57600080fd5b600061305b8d828e01612a8e565b9a5050602061306c8d828e01612914565b995050604061307d8d828e01612acd565b985050606061308e8d828e01612ae2565b975050608061309f8d828e01612a8e565b96505060a06130b08d828e01612a8e565b95505060c06130c18d828e01612a8e565b94505060e06130d28d828e01612ae2565b9350506101006130e48d828e01612a8e565b9250506101206130f68d828e01612a8e565b9150509295989b9194979a5092959850565b600061311483836131a4565b60208301905092915050565b61312981613dfe565b82525050565b61314061313b82613dfe565b613f77565b82525050565b600061315182613bca565b61315b8185613bf8565b935061316683613bba565b8060005b8381101561319757815161317e8882613108565b975061318983613beb565b92505060018101905061316a565b5085935050505092915050565b6131ad81613e22565b82525050565b6131bc81613e22565b82525050565b6131d36131ce82613e2e565b613f89565b82525050565b6131e281613e5a565b82525050565b6131f96131f482613e5a565b613f93565b82525050565b600061320a82613bd5565b6132148185613c09565b9350613224818560208601613ee9565b80840191505092915050565b61323981613ec5565b82525050565b61324881613ed7565b82525050565b600061325982613be0565b6132638185613c14565b9350613273818560208601613ee9565b61327c8161407c565b840191505092915050565b6000613294601683613c14565b915061329f826140c1565b602082019050919050565b60006132b7601283613c14565b91506132c2826140ea565b602082019050919050565b60006132da600e83613c14565b91506132e582614113565b602082019050919050565b60006132fd602a83613c14565b91506133088261413c565b604082019050919050565b6000613320602283613c14565b915061332b8261418b565b604082019050919050565b6000613343601a83613c14565b915061334e826141da565b602082019050919050565b6000613366601a83613c14565b915061337182614203565b602082019050919050565b6000613389601f83613c14565b91506133948261422c565b602082019050919050565b60006133ac601583613c14565b91506133b782614255565b602082019050919050565b60006133cf601783613c14565b91506133da8261427e565b602082019050919050565b60006133f2602683613c14565b91506133fd826142a7565b604082019050919050565b6000613415602a83613c14565b9150613420826142f6565b604082019050919050565b6000613438600e83613c14565b915061344382614345565b602082019050919050565b600061345b601483613c14565b91506134668261436e565b602082019050919050565b600061347e600d83613c14565b915061348982614397565b602082019050919050565b61349d81613e64565b82525050565b6134b46134af82613e64565b613f9d565b82525050565b6134cb6134c682613e80565b613faf565b82525050565b6134da81613eae565b82525050565b6134f16134ec82613eae565b613fd3565b82525050565b61350081613eb8565b82525050565b61351761351282613eb8565b613fdd565b82525050565b600061352982886131c2565b601082019150613539828761312f565b601482019150613549828661312f565b60148201915061355982856134e0565b60208201915061356982846134ba565b6002820191508190509695505050505050565b600061358882856131c2565b6010820191506135988284613506565b6001820191508190509392505050565b60006135b482866131c2565b6010820191506135c48285613506565b6001820191506135d482846134a3565b601082019150819050949350505050565b60006135f182846131e8565b60208201915081905092915050565b600061360c82846131ff565b915081905092915050565b600061362382856131ff565b915061362f82846131e8565b6020820191508190509392505050565b60006020820190506136546000830184613120565b92915050565b600060608201905061366f6000830186613120565b61367c6020830185613120565b61368960408301846134d1565b949350505050565b6000610120820190506136a7600083018c613120565b6136b4602083018b613120565b6136c1604083018a6134d1565b6136ce6060830189613230565b6136db608083018861323f565b6136e860a08301876131d9565b6136f560c08301866134f7565b61370260e08301856131d9565b6137106101008301846131d9565b9a9950505050505050505050565b60006040820190506137336000830185613120565b61374060208301846134d1565b9392505050565b600060208201905081810360008301526137618184613146565b905092915050565b600060208201905061377e60008301846131b3565b92915050565b600060608201905061379960008301866131b3565b6137a66020830185613494565b6137b36040830184613120565b949350505050565b60006020820190506137d060008301846131d9565b92915050565b60006040820190506137eb60008301856131d9565b6137f86020830184613494565b9392505050565b600060808201905061381460008301876131d9565b61382160208301866134f7565b61382e60408301856131d9565b61383b60608301846131d9565b95945050505050565b6000602082019050818103600083015261385e818461324e565b905092915050565b6000602082019050818103600083015261387f81613287565b9050919050565b6000602082019050818103600083015261389f816132aa565b9050919050565b600060208201905081810360008301526138bf816132cd565b9050919050565b600060208201905081810360008301526138df816132f0565b9050919050565b600060208201905081810360008301526138ff81613313565b9050919050565b6000602082019050818103600083015261391f81613336565b9050919050565b6000602082019050818103600083015261393f81613359565b9050919050565b6000602082019050818103600083015261395f8161337c565b9050919050565b6000602082019050818103600083015261397f8161339f565b9050919050565b6000602082019050818103600083015261399f816133c2565b9050919050565b600060208201905081810360008301526139bf816133e5565b9050919050565b600060208201905081810360008301526139df81613408565b9050919050565b600060208201905081810360008301526139ff8161342b565b9050919050565b60006020820190508181036000830152613a1f8161344e565b9050919050565b60006020820190508181036000830152613a3f81613471565b9050919050565b6000602082019050613a5b60008301846134d1565b92915050565b6000613a6b613a7c565b9050613a778282613f1c565b919050565b6000604051905090565b600067ffffffffffffffff821115613aa157613aa061404d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613acd57613acc61404d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613af957613af861404d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b2557613b2461404d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b5157613b5061404d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b7d57613b7c61404d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ba957613ba861404d565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613c3082613e64565b9150613c3b83613e64565b9250826fffffffffffffffffffffffffffffffff03821115613c6057613c5f613fef565b5b828201905092915050565b6000613c7682613eae565b9150613c8183613eae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613cb657613cb5613fef565b5b828201905092915050565b6000613ccc82613eae565b9150613cd783613eae565b925082613ce757613ce661401e565b5b828204905092915050565b6000613cfd82613e64565b9150613d0883613e64565b9250816fffffffffffffffffffffffffffffffff0483118215151615613d3157613d30613fef565b5b828202905092915050565b6000613d4782613eae565b9150613d5283613eae565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d8b57613d8a613fef565b5b828202905092915050565b6000613da182613eae565b9150613dac83613eae565b925082821015613dbf57613dbe613fef565b5b828203905092915050565b6000613dd582613eb8565b9150613de083613eb8565b925082821015613df357613df2613fef565b5b828203905092915050565b6000613e0982613e8e565b9050919050565b6000613e1b82613e8e565b9050919050565b60008115159050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ed082613eae565b9050919050565b6000613ee282613eae565b9050919050565b60005b83811015613f07578082015181840152602081019050613eec565b83811115613f16576000848401525b50505050565b613f258261407c565b810181811067ffffffffffffffff82111715613f4457613f4361404d565b5b80604052505050565b6000613f5882613eb8565b915060ff821415613f6c57613f6b613fef565b5b600182019050919050565b6000613f8282613fc1565b9050919050565b6000819050919050565b6000819050919050565b6000613fa88261408d565b9050919050565b6000613fba8261409a565b9050919050565b6000613fcc826140b4565b9050919050565b6000819050919050565b6000613fe8826140a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160801b9050919050565b60008160f01b9050919050565b60008160f81b9050919050565b60008160601b9050919050565b7f457363726f772076616c756520746f6f20736d616c6c00000000000000000000600082015250565b7f556e7265636f676e697365642070617274790000000000000000000000000000600082015250565b7f4d7573742062652073656c6c6572000000000000000000000000000000000000600082015250565b7f47617320707269636520697320686967686572207468616e206d6178696d756d60008201527f2067617320707269636500000000000000000000000000000000000000000000602082015250565b7f5f627579657250657263656e74206d75737420626520313030206f72206c6f7760008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c7920746865206f776e65722063616e20646f2074686973000000000000600082015250565b7f5369676e6174757265206e6f742066726f6d2072656c61796572000000000000600082015250565b7f4f6e6c79207468652061726269747261746f722063616e20646f207468697300600082015250565b7f457363726f7720646f6573206e6f742065786973740000000000000000000000600082015250565b7f4d757374206265206275796572206f722073656c6c6572000000000000000000600082015250565b7f416d6f756e7420697320686967686572207468616e20616d6f756e742061766160008201527f696c61626c650000000000000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4f766572666c6f77206572726f72000000000000000000000000000000000000600082015250565b7f547261646520616c726561647920657869737473000000000000000000000000600082015250565b7f4d75737420626520627579657200000000000000000000000000000000000000600082015250565b6143c981613dfe565b81146143d457600080fd5b50565b6143e081613e10565b81146143eb57600080fd5b50565b6143f781613e22565b811461440257600080fd5b50565b61440e81613e2e565b811461441957600080fd5b50565b61442581613e5a565b811461443057600080fd5b50565b61443c81613e64565b811461444757600080fd5b50565b61445381613e80565b811461445e57600080fd5b50565b61446a81613eae565b811461447557600080fd5b50565b61448181613eb8565b811461448c57600080fd5b5056fea2646970667358221220029f400fccdd4245e789570424e52d268c6cac1de6213d872e26fa6d467509c764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9,
        "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
        "label": "arbitrator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11,
        "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13,
        "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
        "label": "relayer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 25,
        "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
        "label": "escrows",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Escrow)20_storage)"
      },
      {
        "astId": 29,
        "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
        "label": "collectedFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Escrow)20_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OnChainEscrow.Escrow)",
        "numberOfBytes": "32",
        "value": "t_struct(Escrow)20_storage"
      },
      "t_struct(Escrow)20_storage": {
        "encoding": "inplace",
        "label": "struct OnChainEscrow.Escrow",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 17,
            "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
            "label": "relayerGasSpent",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 19,
            "contract": "contracts/OnChainEscrow.sol:OnChainEscrow",
            "label": "tokenContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}